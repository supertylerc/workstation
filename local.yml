---

- name: Create Systemd Service + Timer in User Scope.
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: Get Necessary Facts Only
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - "env"
          - "user_id"
    - name: Create Ansible Pull Service
      ansible.builtin.template:
        src: ansible-pull.service.j2
        dest: "/home/{{ workstation_user }}/.config/systemd/user/ansible-pull.service"
        mode: "0644"
        owner: "{{ workstation_user }}"
        group: "{{ workstation_user }}"
    - name: Create Ansible Pull Timer
      ansible.builtin.template:
        src: ansible-pull.timer.j2
        dest: "/home/{{ workstation_user }}/.config/systemd/user/ansible-pull.timer"
        mode: "0644"
        owner: "{{ workstation_user }}"
        group: "{{ workstation_user }}"
    - name: Reload daemon
      ansible.builtin.systemd_service:
        daemon_reload: true
        scope: user
    - name: Enable Ansible Pull Timer
      ansible.builtin.systemd_service:
        name: ansible-pull.timer
        state: started
        enabled: true
        scope: user
- name: Install and Update Packages
  hosts: localhost
  connection: local
  become: true
  gather_facts: false
  tasks:
    - name: Update Cache
      community.general.pacman:
        update_cache: true
    - name: Update Packages
      community.general.pacman:
        upgrade: true
    - name: Install Desired General Packages
      community.general.pacman:
        name: "{{ general_packages }}"
- name: Install and Update uv Packages
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: Get list of installed uv tools
      ansible.builtin.command: uv tool list
      register: _uv_tools_list
      changed_when: false
    - name: Install uv packages
      ansible.builtin.command: "uv tool install {{ item.name }}{%if 'from' in item %} --from {{ item.from }}{% endif %}{% if item.force | default(false) %} --force{% endif %}"
      register: _uv_install
      loop: "{{ uv_packages }}"
      when: >
        item.force | default(false) or
        item.name not in _uv_tools_list.stdout
      changed_when: >
        item.force | default(false) or
        _uv_install.rc == 0
    - name: Update uv packages
      ansible.builtin.command: uv tool upgrade --all
      register: _uv_upgrade
      changed_when: '"Nothing to upgrade" not in _uv_upgrade.stderr'
- name: Install and Update Go Binaries/Tools Using `go install`
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
    - name: Install go packages
      ansible.builtin.command: "go install {{ item.name }}"
      register: _go_install
      loop: "{{ go_packages }}"
      changed_when: >
        _go_install.stdout != ""
